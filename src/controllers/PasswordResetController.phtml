<?php

namespace controllers;

use components\core\Utility;
use components\email\EmailService;
use components\validators\ValidatorException;
use components\validators\UserValidator;
use models\User;

/**
 * Class PasswordResetController
 * Controls resetting password and its verification via email
 * @package controllers
 */
class PasswordResetController extends Controller
{
    public function render($params)
    {
        /*$this->session->checkSession();
        $user = User::getInstance();
        $userId = $user->getUserById($_SESSION['USER_ID']);*/


        //Save button pressed on password change
        if (isset($_POST["password"])) {
            $new_data = [
                'password' => htmlspecialchars($_POST['password'])
            ];

            foreach ($new_data as $key => &$value) {
                $new_data[$key] = trim($value);
            }
            /* $this->updatePassword($new_data, $userId);
             $this->setSuccess("Please verify your new password");*/
        }

        $this->view->pageTitle = "Password Reset";
        $this->view->isSuccess = isset($_GET["success"]);
        $this->view->isError = isset($_GET["error"]);
    }

    /**
     *Updates password after checking if new password and repeated password match and requires
     * user to confirm new password via email
     * @param $new_data
     * @param $old_data
     */
    private
    function updatePassword($new_data, $old_data)
    {
        $user = User::getInstance();
        $userId = $_SESSION['USER_ID'];

        $userValidator = UserValidation::getInstance();
        try {
            $userValidator->validateNewPassword($new_data, $old_data);
        } catch (ControllerException $exception) {
            $this->setError($exception->getMessage());
        }

        $new_data += ["user_id" => $userId];
        $email = $user->getUserByEmail($userId->email);

        //TODO doesn't send email
        if ($user->updatePassword($new_data)) {
            $this->confirmationEmail($user, $email);
        }

        /* if (!$user->updatePassword($new_data)) {
             $this->setError("Something went wrong");
         }*/


    }

    /**
     * Sends email to user to confirm changes
     * @param $email
     */
    private function confirmationEmail($email)
    {
        if (isset($_POST['email']) && filter_var($email, FILTER_VALIDATE_EMAIL)) {
            $initFile = Utility::getIniFile();
            $user = User::getInstance();
            $hash = $user->getUserByEmail($email)->verification_hash;

            if (filter_var($initFile['EMAIL_ENABLED'], FILTER_VALIDATE_BOOLEAN)) {
                $emailService = EmailService::getInstance();
                $emailService->sendEmail(
                    $email,
                    "Confirm your new email address",
                    "Follow <a href='" . Utility::getApplicationURL() . "/confirm?hash={$hash}'>this link</a> 
                to confirm your email address.");
            } else {
                $this->setSuccess("Please confirm your email address with this link: <a href='/confirm?hash={$hash}'>Confirm</a>");

            }
        }
    }


}
